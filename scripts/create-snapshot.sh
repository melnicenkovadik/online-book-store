#!/bin/bash

# –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
# Usage: ./scripts/create-snapshot.sh [folder] [output]
# Example: ./scripts/create-snapshot.sh src src-snapshot.md

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
INCLUDE_EXTENSIONS=("ts" "tsx" "js" "jsx" "css" "scss" "sass" "json" "md" "txt" "html" "xml" "yml" "yaml" "py")
EXCLUDE_PATTERNS=("node_modules" ".git" ".next" "dist" "build" "__pycache__" ".DS_Store" "Thumbs.db")
MAX_FILE_SIZE=$((100 * 1024))  # 100KB

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}$1${NC}"
}

log_success() {
    echo -e "${GREEN}$1${NC}"
}

log_warning() {
    echo -e "${YELLOW}$1${NC}"
}

log_error() {
    echo -e "${RED}$1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
should_exclude() {
    local name="$1"
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ "$name" == "$pattern" ]]; then
            return 0
        fi
    done
    return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
should_include_file() {
    local filename="$1"
    local extension="${filename##*.}"
    
    # –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (README, Dockerfile –∏ —Ç.–¥.)
    if [[ "$filename" == "$extension" ]]; then
        if [[ "$filename" =~ ^[A-Z][A-Z_]*$ ]]; then
            return 0
        fi
        return 1
    fi
    
    for ext in "${INCLUDE_EXTENSIONS[@]}"; do
        if [[ "$extension" == "$ext" ]]; then
            return 0
        fi
    done
    return 1
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
get_language() {
    local filename="$1"
    local extension="${filename##*.}"
    local basename=$(basename "$filename")
    
    case "$extension" in
        "ts") echo "typescript" ;;
        "tsx") echo "tsx" ;;
        "js") echo "javascript" ;;
        "jsx") echo "jsx" ;;
        "py") echo "python" ;;
        "css") echo "css" ;;
        "scss") echo "scss" ;;
        "sass") echo "sass" ;;
        "json") echo "json" ;;
        "md") echo "markdown" ;;
        "html") echo "html" ;;
        "xml") echo "xml" ;;
        "yml"|"yaml") echo "yaml" ;;
        "txt") echo "text" ;;
        *) 
            if [[ "$basename" =~ [Dd]ockerfile ]]; then
                echo "dockerfile"
            elif [[ "$basename" =~ [Mm]akefile ]]; then
                echo "makefile"
            elif [[ "$basename" =~ gitignore ]]; then
                echo "gitignore"
            else
                echo "text"
            fi
            ;;
    esac
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
create_tree() {
    local dir="$1"
    local prefix="$2"
    local is_last="$3"
    
    if should_exclude "$(basename "$dir")"; then
        return
    fi
    
    local name=$(basename "$dir")
    local connector
    if [[ "$is_last" == "true" ]]; then
        connector="‚îî‚îÄ‚îÄ "
    else
        connector="‚îú‚îÄ‚îÄ "
    fi
    
    echo "${prefix}${connector}${name}/"
    
    if [[ ! -d "$dir" ]]; then
        return
    fi
    
    local items=()
    while IFS= read -r -d '' item; do
        local basename_item=$(basename "$item")
        if should_exclude "$basename_item"; then
            continue
        fi
        if [[ -f "$item" ]] && ! should_include_file "$basename_item"; then
            continue
        fi
        items+=("$item")
    done < <(find "$dir" -maxdepth 1 -mindepth 1 -print0 | sort -z)
    
    local count=${#items[@]}
    for ((i=0; i<count; i++)); do
        local item="${items[$i]}"
        local is_last_item=$([[ $((i+1)) -eq $count ]] && echo "true" || echo "false")
        local new_prefix
        if [[ "$is_last" == "true" ]]; then
            new_prefix="${prefix}    "
        else
            new_prefix="${prefix}‚îÇ   "
        fi
        
        if [[ -d "$item" ]]; then
            create_tree "$item" "$new_prefix" "$is_last_item"
        else
            local file_connector
            if [[ "$is_last_item" == "true" ]]; then
                file_connector="‚îî‚îÄ‚îÄ "
            else
                file_connector="‚îú‚îÄ‚îÄ "
            fi
            echo "${new_prefix}${file_connector}$(basename "$item")"
        fi
    done
}

# –°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
collect_files() {
    local source_dir="$1"
    local -a files=()
    
    while IFS= read -r -d '' file; do
        local rel_path="${file#$source_dir/}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        local skip=false
        IFS='/' read -ra path_parts <<< "$rel_path"
        for part in "${path_parts[@]}"; do
            if should_exclude "$part"; then
                skip=true
                break
            fi
        done
        
        if [[ "$skip" == "true" ]]; then
            continue
        fi
        
        if ! should_include_file "$(basename "$file")"; then
            continue
        fi
        
        local file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
        if [[ $file_size -gt $MAX_FILE_SIZE ]]; then
            log_warning "–§–∞–π–ª $file –ø—Ä–æ–ø—É—â–µ–Ω (—Ä–∞–∑–º–µ—Ä $((file_size / 1024)) KB)"
            continue
        fi
        
        files+=("$file")
    done < <(find "$source_dir" -type f -print0)
    
    printf '%s\n' "${files[@]}" | sort
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
üì∏ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –ø–∞–ø–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  ./scripts/create-snapshot.sh [–ø–∞–ø–∫–∞] [–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª]

–ü—Ä–∏–º–µ—Ä—ã:
  ./scripts/create-snapshot.sh src src-snapshot.md
  ./scripts/create-snapshot.sh components components-snapshot.md
  ./scripts/create-snapshot.sh . full-project-snapshot.md

–û–ø—Ü–∏–∏:
  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${INCLUDE_EXTENSIONS[*]}
  –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏: ${EXCLUDE_PATTERNS[*]}
  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $((MAX_FILE_SIZE / 1024)) KB
EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞
create_snapshot() {
    local source_dir="$1"
    local output_file="$2"
    
    if [[ ! -d "$source_dir" ]]; then
        log_error "‚ùå –ü–∞–ø–∫–∞ $source_dir –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É snapshots –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    local snapshots_dir="snapshots"
    if [[ ! -d "$snapshots_dir" ]]; then
        mkdir -p "$snapshots_dir"
        log_info "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $snapshots_dir"
    fi
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    local final_output_file="$snapshots_dir/$(basename "$output_file")"
    
    local source_name=$(basename "$source_dir")
    local absolute_source_dir=$(cd "$source_dir" && pwd)
    
    log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–∞–ø–∫–∏: $source_dir"
    log_info "üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: $final_output_file"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª–æ markdown —Ñ–∞–π–ª–∞
    {
        echo "# –°–Ω–∞–ø—à–æ—Ç –ø–∞–ø–∫–∏ $source_name"
        echo ""
        echo "*–°–æ–∑–¥–∞–Ω–æ: $(date '+%d.%m.%Y %H:%M:%S')*"
        echo ""
        echo "## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤"
        echo ""
        echo '```'
        echo "$source_name/"
    } > "$final_output_file"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ
    log_info "üå≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤..."
    
    local items=()
    while IFS= read -r -d '' item; do
        local basename_item=$(basename "$item")
        if should_exclude "$basename_item"; then
            continue
        fi
        if [[ -f "$item" ]] && ! should_include_file "$basename_item"; then
            continue
        fi
        items+=("$item")
    done < <(find "$absolute_source_dir" -maxdepth 1 -mindepth 1 -print0 | sort -z)
    
    local count=${#items[@]}
    for ((i=0; i<count; i++)); do
        local item="${items[$i]}"
        local is_last=$([[ $((i+1)) -eq $count ]] && echo "true" || echo "false")
        
        if [[ -d "$item" ]]; then
            create_tree "$item" "" "$is_last" >> "$final_output_file"
        else
            local connector
            if [[ "$is_last" == "true" ]]; then
                connector="‚îî‚îÄ‚îÄ "
            else
                connector="‚îú‚îÄ‚îÄ "
            fi
            echo "${connector}$(basename "$item")" >> "$final_output_file"
        fi
    done
    
    {
        echo '```'
        echo ""
        echo "---"
        echo ""
        echo "## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤"
        echo ""
    } >> "$final_output_file"
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    log_info "üìã –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤..."
    local files_list=()
    while IFS= read -r -d '' file; do
        files_list+=("$file")
    done < <(collect_files "$absolute_source_dir" | tr '\n' '\0')
    
    log_info "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${#files_list[@]}"
    
    if [[ ${#files_list[@]} -eq 0 ]]; then
        log_warning "‚ö†Ô∏è  –§–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    local count=0
    for file in "${files_list[@]}"; do
        ((count++))
        local rel_path="${file#$absolute_source_dir/}"
        log_info "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ [$count/${#files_list[@]}]: $rel_path"
        
        local language
        language=$(get_language "$file")
        
        {
            echo "### $rel_path"
            echo "\`\`\`$language"
            cat "$file" 2>/dev/null || echo "*–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞*"
            echo ""
            echo '```'
            echo ""
        } >> "$final_output_file"
    done
    
    log_success "‚úÖ –°–Ω–∞–ø—à–æ—Ç —Å–æ–∑–¥–∞–Ω: $final_output_file"
    
    local size_kb
    size_kb=$(stat -c%s "$final_output_file" 2>/dev/null || stat -f%z "$final_output_file" 2>/dev/null || echo 0)
    size_kb=$((size_kb / 1024))
    log_info "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${size_kb} KB"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
    esac
    
    local source_dir="${1:-src}"
    local output_file="${2:-}"
    
    if [[ -z "$output_file" ]]; then
        local folder_name=$(basename "$source_dir")
        output_file="${folder_name}-snapshot.md"
    fi
    
    log_info "üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞..."
    create_snapshot "$source_dir" "$output_file"
}

# –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
 * Usage: node scripts/create-snapshot.js [folder] [output]
 * Example: node scripts/create-snapshot.js src src-snapshot.md
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–Ω–∞–ø—à–æ—Ç
  includeExtensions: [
    '.ts', '.tsx', '.js', '.jsx',
    '.css', '.scss', '.sass', '.less',
    '.json', '.md', '.txt', '.yml', '.yaml',
    '.html', '.xml', '.svg',
    '.env', '.gitignore', '.eslintrc',
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  ],
  
  // –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  excludePatterns: [
    'node_modules',
    '.git',
    '.next',
    'dist',
    'build',
    '.turbo',
    'coverage',
    '.nyc_output',
    'logs',
    '*.log',
    '.DS_Store',
    'Thumbs.db',
    '*.tmp',
    '*.temp',
  ],
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (100KB)
  maxFileSize: 100 * 1024,
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  maxDepth: 10,
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
 */
function shouldExclude(name, isDirectory = false) {
  for (const pattern of CONFIG.excludePatterns) {
    if (pattern.includes('*')) {
      // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ wildcards
      const regex = new RegExp(pattern.replace(/\*/g, '.*'));
      if (regex.test(name)) return true;
    } else {
      if (name === pattern) return true;
    }
  }
  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
 */
function shouldIncludeFile(filename) {
  const ext = path.extname(filename).toLowerCase();
  
  // –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–∫–∞–∫ Dockerfile, README)
  if (!ext && /^[A-Z][A-Z_]*[A-Z]?$/.test(path.basename(filename))) {
    return true;
  }
  
  return CONFIG.includeExtensions.includes(ext);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
 */
function getLanguageByExtension(filename) {
  const ext = path.extname(filename).toLowerCase();
  const basename = path.basename(filename).toLowerCase();
  
  const langMap = {
    '.ts': 'typescript',
    '.tsx': 'tsx',
    '.js': 'javascript',
    '.jsx': 'jsx',
    '.css': 'css',
    '.scss': 'scss',
    '.sass': 'sass',
    '.less': 'less',
    '.json': 'json',
    '.md': 'markdown',
    '.html': 'html',
    '.xml': 'xml',
    '.yml': 'yaml',
    '.yaml': 'yaml',
    '.svg': 'xml',
    '.txt': 'text',
  };
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  if (!ext) {
    if (basename === 'dockerfile') return 'dockerfile';
    if (basename === 'makefile') return 'makefile';
    if (basename.includes('gitignore')) return 'gitignore';
    if (basename.includes('eslintrc')) return 'json';
    return 'text';
  }
  
  return langMap[ext] || 'text';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
function createFileTree(dirPath, prefix = '', isLast = true, depth = 0) {
  if (depth > CONFIG.maxDepth) return '';
  
  const name = path.basename(dirPath);
  if (shouldExclude(name, true)) return '';
  
  let tree = '';
  const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
  tree += `${prefix}${connector}${name}/\n`;
  
  try {
    const items = fs.readdirSync(dirPath, { withFileTypes: true });
    const filteredItems = items.filter(item => {
      if (shouldExclude(item.name, item.isDirectory())) return false;
      if (item.isFile() && !shouldIncludeFile(item.name)) return false;
      return true;
    });
    
    filteredItems.forEach((item, index) => {
      const isLastItem = index === filteredItems.length - 1;
      const newPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
      const itemPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        tree += createFileTree(itemPath, newPrefix, isLastItem, depth + 1);
      } else {
        const fileConnector = isLastItem ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
        tree += `${newPrefix}${fileConnector}${item.name}\n`;
      }
    });
  } catch (error) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}: ${error.message}`);
  }
  
  return tree;
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function collectFiles(dirPath, depth = 0) {
  if (depth > CONFIG.maxDepth) return [];
  
  const files = [];
  
  try {
    const items = fs.readdirSync(dirPath, { withFileTypes: true });
    
    for (const item of items) {
      if (shouldExclude(item.name, item.isDirectory())) continue;
      
      const itemPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        files.push(...collectFiles(itemPath, depth + 1));
      } else if (shouldIncludeFile(item.name)) {
        try {
          const stats = fs.statSync(itemPath);
          if (stats.size <= CONFIG.maxFileSize) {
            files.push(itemPath);
          } else {
            console.warn(`–§–∞–π–ª ${itemPath} –ø—Ä–æ–ø—É—â–µ–Ω (—Ä–∞–∑–º–µ—Ä ${stats.size} –±–∞–π—Ç > ${CONFIG.maxFileSize})`);
          }
        } catch (error) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ ${itemPath}: ${error.message}`);
        }
      }
    }
  } catch (error) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}: ${error.message}`);
  }
  
  return files;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç
 */
function createSnapshot(sourceDir, outputFile) {
  const absoluteSourceDir = path.resolve(sourceDir);
  const sourceName = path.basename(absoluteSourceDir);
  
  if (!fs.existsSync(absoluteSourceDir)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ ${sourceDir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É snapshots –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const snapshotsDir = 'snapshots';
  if (!fs.existsSync(snapshotsDir)) {
    fs.mkdirSync(snapshotsDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${snapshotsDir}`);
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
  const finalOutputFile = path.join(snapshotsDir, path.basename(outputFile));
  
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–∞–ø–∫–∏: ${sourceDir}`);
  console.log(`üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${finalOutputFile}`);
  
  let markdown = `# –°–Ω–∞–ø—à–æ—Ç –ø–∞–ø–∫–∏ ${sourceName}\n\n`;
  markdown += `*–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}*\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  console.log('üå≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤...');
  markdown += '## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤\n\n```\n';
  markdown += `${sourceName}/\n`;
  
  try {
    const items = fs.readdirSync(absoluteSourceDir, { withFileTypes: true });
    const filteredItems = items.filter(item => {
      if (shouldExclude(item.name, item.isDirectory())) return false;
      if (item.isFile() && !shouldIncludeFile(item.name)) return false;
      return true;
    });
    
    filteredItems.forEach((item, index) => {
      const isLast = index === filteredItems.length - 1;
      const itemPath = path.join(absoluteSourceDir, item.name);
      
      if (item.isDirectory()) {
        markdown += createFileTree(itemPath, '', isLast, 1);
      } else {
        const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
        markdown += `${connector}${item.name}\n`;
      }
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞: ${error.message}`);
  }
  
  markdown += '```\n\n---\n\n';
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  console.log('üìã –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤...');
  const files = collectFiles(absoluteSourceDir);
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  
  if (files.length === 0) {
    console.warn('‚ö†Ô∏è  –§–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
  markdown += '## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n';
  
  files.sort().forEach((filePath, index) => {
    const relativePath = path.relative(absoluteSourceDir, filePath);
    const normalizedPath = relativePath.replace(/\\/g, '/'); // –î–ª—è Windows
    const filename = path.basename(filePath);
    
    console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ [${index + 1}/${files.length}]: ${normalizedPath}`);
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const language = getLanguageByExtension(filename);
      
      markdown += `### ${normalizedPath}\n`;
      markdown += `\`\`\`${language}\n`;
      markdown += content;
      markdown += '\n```\n\n';
    } catch (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}: ${error.message}`);
      markdown += `### ${normalizedPath}\n`;
      markdown += `*–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}*\n\n`;
    }
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  try {
    fs.writeFileSync(finalOutputFile, markdown, 'utf8');
    console.log(`‚úÖ –°–Ω–∞–ø—à–æ—Ç —Å–æ–∑–¥–∞–Ω: ${finalOutputFile}`);
    
    const stats = fs.statSync(finalOutputFile);
    const sizeKB = Math.round(stats.size / 1024);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sizeKB} KB`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
    process.exit(1);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å
 */
function showHelp() {
  console.log(`
üì∏ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –ø–∞–ø–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/create-snapshot.js [–ø–∞–ø–∫–∞] [–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª]

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/create-snapshot.js src src-snapshot.md
  node scripts/create-snapshot.js components components-snapshot.md
  node scripts/create-snapshot.js . full-project-snapshot.md

–û–ø—Ü–∏–∏:
  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ñ–∞–π–ª–µ scripts/create-snapshot.js):
  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${CONFIG.includeExtensions.join(', ')}
  - –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏: ${CONFIG.excludePatterns.join(', ')}
  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(CONFIG.maxFileSize / 1024)} KB
  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: ${CONFIG.maxDepth} —É—Ä–æ–≤–Ω–µ–π
`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('-h') || args.includes('--help')) {
    showHelp();
    process.exit(0);
  }
  
  const sourceDir = args[0] || 'src';
  const outputFile = args[1] || `${path.basename(sourceDir)}-snapshot.md`;
  
  console.log('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞...');
  createSnapshot(sourceDir, outputFile);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { createSnapshot, CONFIG };

#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
Usage: python scripts/create-snapshot.py [folder] [output]
Example: python scripts/create-snapshot.py src src-snapshot.md
"""

import os
import sys
from pathlib import Path
from datetime import datetime
import argparse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–Ω–∞–ø—à–æ—Ç
    'include_extensions': {
        '.ts', '.tsx', '.js', '.jsx',
        '.css', '.scss', '.sass', '.less',
        '.json', '.md', '.txt', '.yml', '.yaml',
        '.html', '.xml', '.svg',
        '.env', '.gitignore', '.eslintrc', '.py'
    },
    
    # –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    'exclude_patterns': {
        'node_modules', '.git', '.next', 'dist', 'build',
        '.turbo', 'coverage', '.nyc_output', 'logs',
        '__pycache__', '.pytest_cache', 'venv', 'env',
        '.venv', '.DS_Store', 'Thumbs.db'
    },
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (100KB)
    'max_file_size': 100 * 1024,
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    'max_depth': 10,
}

def get_language_by_extension(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
    ext = Path(filename).suffix.lower()
    basename = Path(filename).name.lower()
    
    lang_map = {
        '.ts': 'typescript',
        '.tsx': 'tsx',
        '.js': 'javascript', 
        '.jsx': 'jsx',
        '.py': 'python',
        '.css': 'css',
        '.scss': 'scss',
        '.sass': 'sass',
        '.less': 'less',
        '.json': 'json',
        '.md': 'markdown',
        '.html': 'html',
        '.xml': 'xml',
        '.yml': 'yaml',
        '.yaml': 'yaml',
        '.svg': 'xml',
        '.txt': 'text',
    }
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if not ext:
        if 'dockerfile' in basename:
            return 'dockerfile'
        elif 'makefile' in basename:
            return 'makefile'
        elif 'gitignore' in basename:
            return 'gitignore'
        elif 'eslintrc' in basename:
            return 'json'
        return 'text'
    
    return lang_map.get(ext, 'text')

def should_exclude(name, is_directory=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
    return name in CONFIG['exclude_patterns'] or name.startswith('.')

def should_include_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª"""
    path = Path(filename)
    ext = path.suffix.lower()
    
    # –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–∫–∞–∫ Dockerfile, README)
    if not ext and path.name.isupper():
        return True
    
    return ext in CONFIG['include_extensions']

def create_file_tree(dir_path, prefix='', is_last=True, depth=0):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    if depth > CONFIG['max_depth']:
        return ''
    
    name = Path(dir_path).name
    if should_exclude(name, True):
        return ''
    
    tree = ''
    connector = '‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '
    tree += f"{prefix}{connector}{name}/\n"
    
    try:
        items = []
        for item in Path(dir_path).iterdir():
            if should_exclude(item.name, item.is_dir()):
                continue
            if item.is_file() and not should_include_file(item.name):
                continue
            items.append(item)
        
        items.sort(key=lambda x: (x.is_file(), x.name.lower()))
        
        for i, item in enumerate(items):
            is_last_item = i == len(items) - 1
            new_prefix = prefix + ('    ' if is_last else '‚îÇ   ')
            
            if item.is_dir():
                tree += create_file_tree(item, new_prefix, is_last_item, depth + 1)
            else:
                file_connector = '‚îî‚îÄ‚îÄ ' if is_last_item else '‚îú‚îÄ‚îÄ '
                tree += f"{new_prefix}{file_connector}{item.name}\n"
                
    except PermissionError:
        print(f"‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
    
    return tree

def collect_files(dir_path, depth=0):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
    if depth > CONFIG['max_depth']:
        return []
    
    files = []
    try:
        for item in Path(dir_path).rglob('*'):
            if item.is_file():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                parts = item.parts
                if any(should_exclude(part, True) for part in parts):
                    continue
                
                if not should_include_file(item.name):
                    continue
                
                try:
                    if item.stat().st_size <= CONFIG['max_file_size']:
                        files.append(item)
                    else:
                        size_kb = item.stat().st_size // 1024
                        print(f"‚ö†Ô∏è  –§–∞–π–ª {item} –ø—Ä–æ–ø—É—â–µ–Ω (—Ä–∞–∑–º–µ—Ä {size_kb} KB)")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ {item}: {e}")
                    
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ {dir_path}: {e}")
    
    return files

def create_snapshot(source_dir, output_file):
    """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç"""
    source_path = Path(source_dir).resolve()
    source_name = source_path.name
    
    if not source_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É snapshots –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    snapshots_dir = Path('snapshots')
    if not snapshots_dir.exists():
        snapshots_dir.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {snapshots_dir}")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    final_output_file = snapshots_dir / Path(output_file).name
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–∞–ø–∫–∏: {source_dir}")
    print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {final_output_file}")
    
    markdown = f"# –°–Ω–∞–ø—à–æ—Ç –ø–∞–ø–∫–∏ {source_name}\n\n"
    markdown += f"*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print('üå≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤...')
    markdown += '## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤\n\n```\n'
    markdown += f"{source_name}/\n"
    
    try:
        items = []
        for item in source_path.iterdir():
            if should_exclude(item.name, item.is_dir()):
                continue
            if item.is_file() and not should_include_file(item.name):
                continue
            items.append(item)
        
        items.sort(key=lambda x: (x.is_file(), x.name.lower()))
        
        for i, item in enumerate(items):
            is_last = i == len(items) - 1
            
            if item.is_dir():
                markdown += create_file_tree(item, '', is_last, 1)
            else:
                connector = '‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '
                markdown += f"{connector}{item.name}\n"
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞: {e}")
    
    markdown += '```\n\n---\n\n'
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print('üìã –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤...')
    files = collect_files(source_path)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    if not files:
        print('‚ö†Ô∏è  –§–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    markdown += '## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n'
    
    files.sort(key=lambda x: str(x))
    
    for i, file_path in enumerate(files):
        relative_path = file_path.relative_to(source_path)
        normalized_path = str(relative_path).replace('\\', '/')  # –î–ª—è Windows
        
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ [{i + 1}/{len(files)}]: {normalized_path}")
        
        try:
            content = file_path.read_text(encoding='utf-8', errors='ignore')
            language = get_language_by_extension(file_path.name)
            
            markdown += f"### {normalized_path}\n"
            markdown += f"```{language}\n"
            markdown += content
            markdown += '\n```\n\n'
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            markdown += f"### {normalized_path}\n"
            markdown += f"*–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}*\n\n"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        final_output_file.write_text(markdown, encoding='utf-8')
        print(f"‚úÖ –°–Ω–∞–ø—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {final_output_file}")
        
        size_kb = final_output_file.stat().st_size // 1024
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_kb} KB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–∞–ø–∫–∏ —Å –∫–æ–¥–æ–º',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
–ü—Ä–∏–º–µ—Ä—ã:
  python scripts/create-snapshot.py src src-snapshot.md
  python scripts/create-snapshot.py components components-snapshot.md  
  python scripts/create-snapshot.py . full-project-snapshot.md

–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(sorted(CONFIG['include_extensions']))}
  –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏: {', '.join(sorted(CONFIG['exclude_patterns']))}
  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {CONFIG['max_file_size'] // 1024} KB
  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {CONFIG['max_depth']} —É—Ä–æ–≤–Ω–µ–π
        """
    )
    
    parser.add_argument('folder', nargs='?', default='src',
                       help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: src)')
    parser.add_argument('output', nargs='?', 
                       help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: [–ø–∞–ø–∫–∞]-snapshot.md)')
    
    args = parser.parse_args()
    
    if not args.output:
        folder_name = Path(args.folder).name
        args.output = f"{folder_name}-snapshot.md"
    
    print('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞...')
    create_snapshot(args.folder, args.output)

if __name__ == '__main__':
    main()

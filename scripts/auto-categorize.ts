import { resolve } from "node:path";
import { config } from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
config({ path: resolve(process.cwd(), ".env.local") });

import type { Types } from "mongoose";
import { connectToDB } from "../src/lib/db";
import { CategoryModel } from "../src/lib/models/Category";
import { ProductModel } from "../src/lib/models/Product";

interface CategoryDefinition {
  name: string;
  slug: string;
  parentSlug?: string;
  order: number;
  matcher: (product: any) => boolean;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryDefinitions: CategoryDefinition[] = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  {
    name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    slug: "ukrainian-language",
    order: 1,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      const title = p.title.toLowerCase();
      return (
        subject.includes("—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞") ||
        subject.includes("—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞") ||
        subject.includes("—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è") ||
        subject.includes("–ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ —á–∏—Ç–∞–Ω–Ω—è") ||
        title.includes("—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞") ||
        title.includes("—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏") ||
        title.includes("–ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ —á–∏—Ç–∞–Ω–Ω—è") ||
        title.includes("–±—É–∫–≤–∞—Ä")
      );
    },
  },
  {
    name: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    slug: "mathematics",
    order: 2,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      const title = p.title.toLowerCase();
      return (
        subject.includes("–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞") ||
        subject.includes("–∞–ª–≥–µ–±—Ä–∞") ||
        subject.includes("–≥–µ–æ–º–µ—Ç—Ä—ñ—è") ||
        title.includes("–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞") ||
        title.includes("–∞–ª–≥–µ–±—Ä–∞") ||
        title.includes("–≥–µ–æ–º–µ—Ç—Ä—ñ—è")
      );
    },
  },
  {
    name: "–Ü–Ω–æ–∑–µ–º–Ω—ñ –º–æ–≤–∏",
    slug: "foreign-languages",
    order: 3,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      const title = p.title.toLowerCase();
      return (
        subject.includes("–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞") ||
        subject.includes("–Ω—ñ–º–µ—Ü—å–∫–∞") ||
        subject.includes("—Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∞") ||
        title.includes("english") ||
        title.includes("deutsch")
      );
    },
  },
  {
    name: "–ü—Ä–∏—Ä–æ–¥–Ω–∏—á—ñ –Ω–∞—É–∫–∏",
    slug: "natural-sciences",
    order: 4,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      const title = p.title.toLowerCase();
      return (
        subject.includes("—è –¥–æ—Å–ª—ñ–¥–∂—É—é —Å–≤—ñ—Ç") ||
        subject.includes("–ø—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤—Å—Ç–≤–æ") ||
        subject.includes("–±—ñ–æ–ª–æ–≥—ñ—è") ||
        subject.includes("—Ö—ñ–º—ñ—è") ||
        subject.includes("—Ñ—ñ–∑–∏–∫–∞") ||
        title.includes("—è –¥–æ—Å–ª—ñ–¥–∂—É—é —Å–≤—ñ—Ç") ||
        title.includes("–±—ñ–æ–ª–æ–≥—ñ—è") ||
        title.includes("—Ö—ñ–º—ñ—è") ||
        title.includes("—Ñ—ñ–∑–∏–∫–∞")
      );
    },
  },
  {
    name: "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    slug: "computer-science",
    order: 5,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      return subject.includes("—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞");
    },
  },
  {
    name: "–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è",
    slug: "geography",
    order: 6,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      return subject.includes("–≥–µ–æ–≥—Ä–∞—Ñ—ñ—è");
    },
  },
  {
    name: "–Ü—Å—Ç–æ—Ä—ñ—è",
    slug: "history",
    order: 7,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      return subject.includes("—ñ—Å—Ç–æ—Ä—ñ—è");
    },
  },
  {
    name: "–Ü–Ω—à—ñ –ø—Ä–µ–¥–º–µ—Ç–∏",
    slug: "other-subjects",
    order: 8,
    matcher: (p) => {
      const subject = String(p.attributes?.subject || "").toLowerCase();
      const title = p.title.toLowerCase();
      return (
        subject.includes("–æ—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤") ||
        subject.includes("–æ–±—Ä–∞–∑–æ—Ç–≤–æ—Ä—á–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ") ||
        subject.includes("–º—É–∑–∏—á–Ω–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ") ||
        subject.includes("—Ç—Ä—É–¥–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è") ||
        subject.includes("—Ñ—ñ–∑–∏—á–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞") ||
        subject.includes("–ø—Ä–∞–≤–æ–∑–Ω–∞–≤—Å—Ç–≤–æ") ||
        subject.includes("–µ–∫–æ–Ω–æ–º—ñ–∫–∞") ||
        subject.includes("–µ—Ç–∏–∫–∞") ||
        title.includes("—Ñ—ñ–∑–∏—á–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞") ||
        title.includes("–æ—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤")
      );
    },
  },

  // –ü–æ –∫–ª–∞—Å—Å–∞–º
  {
    name: "1-4 –∫–ª–∞—Å–∏",
    slug: "grades-1-4",
    order: 10,
    matcher: (p) => {
      const classNum = Number(p.attributes?.class);
      if (!Number.isNaN(classNum) && classNum >= 1 && classNum <= 4)
        return true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const title = p.title.toLowerCase();
      return (
        /\b[1-4]\s*–∫–ª–∞—Å/i.test(p.title) ||
        title.includes("–ø–æ—á–∞—Ç–∫–æ–≤") ||
        title.includes("–Ω—É—à 1") ||
        title.includes("–Ω—É—à 2") ||
        title.includes("–Ω—É—à 3") ||
        title.includes("–Ω—É—à 4")
      );
    },
  },
  {
    name: "5-9 –∫–ª–∞—Å–∏",
    slug: "grades-5-9",
    order: 11,
    matcher: (p) => {
      const classNum = Number(p.attributes?.class);
      if (!Number.isNaN(classNum) && classNum >= 5 && classNum <= 9)
        return true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      return /\b[5-9]\s*–∫–ª–∞—Å/i.test(p.title);
    },
  },
  {
    name: "10-11 –∫–ª–∞—Å–∏",
    slug: "grades-10-11",
    order: 12,
    matcher: (p) => {
      const classNum = Number(p.attributes?.class);
      if (!Number.isNaN(classNum) && classNum >= 10 && classNum <= 11)
        return true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      return /\b(10|11)\s*–∫–ª–∞—Å/i.test(p.title);
    },
  },
];

async function autoCategorize(dryRun = true) {
  console.log("üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
  await connectToDB();

  console.log("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
  const allProducts = await ProductModel.find({}).lean();
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);

  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryMap = new Map<string, Types.ObjectId>();

  console.log("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");

  for (const catDef of categoryDefinitions) {
    let category = await CategoryModel.findOne({ slug: catDef.slug });

    if (!category) {
      if (dryRun) {
        console.log(`  [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: ${catDef.name}`);
      } else {
        category = await CategoryModel.create({
          name: catDef.name,
          slug: catDef.slug,
          order: catDef.order,
          isActive: true,
        });
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: ${catDef.name}`);
      }
    } else {
      console.log(`  ‚ÑπÔ∏è  –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ${catDef.name}`);
    }

    if (category) {
      categoryMap.set(catDef.slug, category._id);
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  console.log("\nüì¶ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...");

  const categorization = new Map<
    string,
    { count: number; samples: string[] }
  >();

  for (const catDef of categoryDefinitions) {
    categorization.set(catDef.slug, { count: 0, samples: [] });
  }

  let uncategorizedCount = 0;
  const uncategorizedSamples: string[] = [];

  for (const product of allProducts) {
    let hasCategory = false;

    for (const catDef of categoryDefinitions) {
      if (catDef.matcher(product)) {
        hasCategory = true;
        const cat = categorization.get(catDef.slug);
        if (!cat) continue;
        cat.count++;

        if (cat.samples.length < 2) {
          cat.samples.push(product.title);
        }
      }
    }

    if (!hasCategory) {
      uncategorizedCount++;
      if (uncategorizedSamples.length < 5) {
        uncategorizedSamples.push(product.title);
      }
    }
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:");
  console.log("‚ïê".repeat(80));

  for (const catDef of categoryDefinitions) {
    const data = categorization.get(catDef.slug);
    if (!data) continue;
    console.log(`\nüìÅ ${catDef.name} (${catDef.slug})`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${data.count}`);
    if (data.samples.length > 0) {
      console.log("   –ü—Ä–∏–º–µ—Ä—ã:");
      for (const sample of data.samples) {
        console.log(`   - ${sample.substring(0, 80)}...`);
      }
    }
  }

  console.log(`\n‚ùì –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${uncategorizedCount}`);
  if (uncategorizedSamples.length > 0) {
    console.log("   –ü—Ä–∏–º–µ—Ä—ã:");
    for (const sample of uncategorizedSamples) {
      console.log(`   - ${sample}`);
    }
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!dryRun) {
    console.log("\n\nüöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò...");
    let updated = 0;

    for (const product of allProducts) {
      const categoryIds: Types.ObjectId[] = [];

      for (const catDef of categoryDefinitions) {
        if (catDef.matcher(product)) {
          const categoryId = categoryMap.get(catDef.slug);
          if (categoryId) {
            categoryIds.push(categoryId);
          }
        }
      }

      if (categoryIds.length > 0) {
        await ProductModel.updateOne(
          { _id: product._id },
          { $set: { categoryIds } },
        );
        updated++;

        if (updated % 500 === 0) {
          console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated}/${allProducts.length}`);
        }
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updated}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log("\n\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:");
    for (const catDef of categoryDefinitions) {
      const categoryId = categoryMap.get(catDef.slug);
      if (categoryId) {
        const count = await ProductModel.countDocuments({
          categoryIds: categoryId,
        });
        console.log(`  ${catDef.name}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    }
  } else {
    console.log("\n\n‚ö†Ô∏è  DRY RUN MODE - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
    console.log("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --apply —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
  }

  console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ!");
  process.exit(0);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const shouldApply = process.argv.includes("--apply");
const dryRun = !shouldApply;

if (dryRun) {
  console.log("üîç –†–µ–∂–∏–º: DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î)");
  console.log("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --apply –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n");
} else {
  console.log("‚ö†Ô∏è  –†–µ–∂–∏–º: –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô");
  console.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n");
}

autoCategorize(dryRun).catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  process.exit(1);
});

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
 *
 * ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ü–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á –¥–ª—è —Ä–æ–±–æ—Ç–∏!
 *
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:
 *
 * 1. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ https://my.novaposhta.ua/
 * 2. –û—Ç—Ä–∏–º–∞–π—Ç–µ API –∫–ª—é—á —É —Ä–æ–∑–¥—ñ–ª—ñ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" ‚Üí "–ë–µ–∑–ø–µ–∫–∞"
 * 3. –î–æ–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ .env:
 *    NOVA_POSHTA_API_KEY=–≤–∞—à_–∫–ª—é—á
 *
 * 4. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª src/lib/env.ts –∑:
 *    export const NOVA_POSHTA_API_KEY = process.env.NOVA_POSHTA_API_KEY || "";
 *
 * 5. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API: https://developers.novaposhta.ua/
 *
 * –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ API:
 * - searchSettlements: –ø–æ—à—É–∫ –º—ñ—Å—Ç
 * - getWarehouses: —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
 * - getDocumentPrice: —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
 *
 * –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:
 * ```
 * fetch('https://api.novaposhta.ua/v2.0/json/', {
 *   method: 'POST',
 *   headers: { 'Content-Type': 'application/json' },
 *   body: JSON.stringify({
 *     apiKey: API_KEY,
 *     modelName: 'Address',
 *     calledMethod: 'searchSettlements',
 *     methodProperties: { CityName: query }
 *   })
 * });
 * ```
 */

export interface NovaPoshtaCity {
  ref: string;
  name: string;
  area: string;
}

export interface NovaPoshtaWarehouse {
  ref: string;
  description: string;
  cityRef: string;
  number: string;
}

/**
 * –ü–æ—à—É–∫ –º—ñ—Å—Ç –∑–∞ –Ω–∞–∑–≤–æ—é
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞—à API route: /api/novaposhta/cities
 */
export async function searchCities(query: string): Promise<NovaPoshtaCity[]> {
  console.log("üîç Searching cities for:", query);

  // –ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É
  if (!query || query.length < 2) {
    console.log("‚è≠Ô∏è Query too short, skipping search");
    return [];
  }

  try {
    const response = await fetch(
      `/api/novaposhta/cities?query=${encodeURIComponent(query)}`,
    );

    if (!response.ok) {
      console.error("‚ùå API request failed:", response.statusText);
      return [];
    }

    const cities = await response.json();
    console.log("‚úÖ Found cities:", cities.length);
    return cities;
  } catch (error) {
    console.error("‚ùå Nova Poshta API error (searchCities):", error);
    return [];
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –¥–ª—è –º—ñ—Å—Ç–∞
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞—à API route: /api/novaposhta/warehouses
 */
export async function getWarehouses(
  cityRef: string,
): Promise<NovaPoshtaWarehouse[]> {
  if (!cityRef) {
    return [];
  }

  try {
    const response = await fetch(
      `/api/novaposhta/warehouses?cityRef=${encodeURIComponent(cityRef)}`,
    );

    if (!response.ok) {
      console.error("‚ùå API request failed:", response.statusText);
      return [];
    }

    const warehouses = await response.json();
    console.log("‚úÖ Found warehouses:", warehouses.length);
    return warehouses;
  } catch (error) {
    console.error("‚ùå Nova Poshta API error (getWarehouses):", error);
    return [];
  }
}

/**
 * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞—à API route: /api/novaposhta/delivery-cost
 */
export async function calculateDeliveryCost(
  cityRef: string,
  weight: number = 1,
  cost: number = 0,
): Promise<number> {
  try {
    const params = new URLSearchParams({
      cityRef,
      weight: weight.toString(),
      cost: cost.toString(),
    });

    const response = await fetch(`/api/novaposhta/delivery-cost?${params}`);

    if (!response.ok) {
      console.error("‚ùå API request failed:", response.statusText);
      return 70;
    }

    const data = await response.json();
    console.log("üí∞ Delivery cost:", data.cost);
    return data.cost;
  } catch (error) {
    console.error("‚ùå Nova Poshta API error (calculateDeliveryCost):", error);
    return 70; // Fallback –¥–æ –±–∞–∑–æ–≤–æ—ó —Ü—ñ–Ω–∏
  }
}

/**
 * –ü–æ—à—É–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
 */
export async function searchWarehouses(
  cityRef: string,
  query: string,
): Promise<NovaPoshtaWarehouse[]> {
  const warehouses = await getWarehouses(cityRef);

  if (!query) {
    return warehouses;
  }

  return warehouses.filter(
    (wh) =>
      wh.description.toLowerCase().includes(query.toLowerCase()) ||
      wh.number.includes(query),
  );
}

"use client";

import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { Button } from "@/components/uikit";
import { clientLogger } from "@/lib/client-logger";
import {
  calculateDeliveryCost,
  getWarehouses,
  type NovaPoshtaCity,
  type NovaPoshtaWarehouse,
  searchCities,
} from "@/services/novaposhta";
import { OrdersService } from "@/services/orders";
import { useCart } from "@/store/cart";
import styles from "./checkout.module.scss";

type FormData = {
  name: string;
  email: string;
  phone: string;
  address: string;
  city: string;
  cityRef: string;
  warehouse: string;
  warehouseRef: string;
  paymentMethod: "cod" | "requisites";
  notes: string;
};

type FormErrors = {
  [K in keyof FormData]?: string;
};

export default function CheckoutPage() {
  const router = useRouter();
  const cart = useCart();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    name: "–ò–º—è –§–∞–º–∏–ª–∏—è",
    email: "email@example.com",
    phone: "+380991234567",
    address: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
    city: "–ì–æ—Ä–æ–¥",
    cityRef: "city_1234567890",
    warehouse: "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1",
    warehouseRef: "warehouse_1234567890",
    paymentMethod: "cod",
    notes: "–ü—Ä–∏–º—ñ—Ç–∫–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
  });
  const [errors, setErrors] = useState<FormErrors>({});
  const [step, setStep] = useState<"cart" | "shipping" | "payment">("cart");

  // –ù–æ–≤–∞ –ü–æ—à—Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
  const [cities, setCities] = useState<NovaPoshtaCity[]>([]);
  const [warehouses, setWarehouses] = useState<NovaPoshtaWarehouse[]>([]);
  const [showCities, setShowCities] = useState(false);
  const [showWarehouses, setShowWarehouses] = useState(false);
  const [citySearch, setCitySearch] = useState("");
  const [deliveryCost, setDeliveryCost] = useState(0);

  // Calculate order totals
  const subtotal = Object.values(cart.items).reduce(
    (sum, item) => sum + item.price * item.qty,
    0,
  );
  const shippingFee = deliveryCost;
  const total = subtotal + shippingFee;

  // Redirect to home if cart is empty
  useEffect(() => {
    if (Object.keys(cart.items).length === 0) {
      router.push("/");
    }
  }, [cart.items, router]);

  // –ü–æ—à—É–∫ –º—ñ—Å—Ç –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ
  useEffect(() => {
    const performCitySearch = async () => {
      console.log("üîç Searching cities for:", citySearch);
      if (citySearch.length >= 2) {
        const results = await searchCities(citySearch);
        console.log("üìç Cities found:", results);
        setCities(results);
      } else {
        setCities([]);
      }
    };

    const timeoutId = setTimeout(performCitySearch, 300);
    return () => clearTimeout(timeoutId);
  }, [citySearch]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞
  useEffect(() => {
    const loadWarehouses = async () => {
      if (formData.cityRef) {
        const wh = await getWarehouses(formData.cityRef);
        setWarehouses(wh);
      }
    };

    loadWarehouses();
  }, [formData.cityRef]);

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
  useEffect(() => {
    const calculateCost = async () => {
      if (formData.cityRef && subtotal > 0) {
        const cost = await calculateDeliveryCost(formData.cityRef, 1, subtotal);
        setDeliveryCost(cost);
      }
    };

    calculateCost();
  }, [formData.cityRef, subtotal]);

  // Handle form input changes
  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >,
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Clear error when field is edited
    if (errors[name as keyof FormData]) {
      setErrors((prev) => ({ ...prev, [name]: undefined }));
    }
  };

  // Validate form data
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // Required fields
    if (!formData.name.trim()) newErrors.name = "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    if (!formData.email.trim()) newErrors.email = "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    if (!formData.phone.trim()) newErrors.phone = "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    if (!formData.city || !formData.cityRef)
      newErrors.city = "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É";
    if (!formData.warehouse || !formData.warehouseRef)
      newErrors.address = "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É";

    // Email format
    if (formData.email && !/^\S+@\S+\.\S+$/.test(formData.email)) {
      newErrors.email = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email";
    }

    // Phone format (simple validation)
    if (formData.phone && !/^\+?[0-9\s-]{10,15}$/.test(formData.phone)) {
      newErrors.phone = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Create order items from cart
      const items = Object.values(cart.items).map((item) => ({
        productId: item.productId,
        qty: item.qty,
        title: item.title,
        price: item.price,
        image: item.image,
      }));

      // Create order payload
      const orderPayload = {
        customer: {
          fullName: formData.name,
          email: formData.email,
          phone: formData.phone,
        },
        delivery: {
          carrier: "nova" as const,
          city: formData.city,
          cityRef: formData.cityRef,
          warehouse: formData.warehouse,
          warehouseRef: formData.warehouseRef,
          address: formData.address,
        },
        payment: {
          provider: formData.paymentMethod,
        },
        items,
        notes: formData.notes,
      };

      // Create order
      const order = await OrdersService.createOrder(orderPayload);

      // Clear cart and redirect to confirmation page
      cart.clear();
      router.push(`/order/confirmed?order=${order.number}`);
    } catch (error) {
      clientLogger.error("Failed to create order", error as Error);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle step navigation
  const goToNextStep = () => {
    if (step === "cart") {
      setStep("shipping");
    } else if (step === "shipping") {
      // Validate shipping info before proceeding
      if (
        formData.name &&
        formData.email &&
        formData.phone &&
        formData.city &&
        formData.cityRef &&
        formData.warehouse &&
        formData.warehouseRef
      ) {
        setStep("payment");
      } else {
        validateForm();
      }
    }
  };

  const goToPrevStep = () => {
    if (step === "payment") {
      setStep("shipping");
    } else if (step === "shipping") {
      setStep("cart");
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>

      {/* Progress indicator */}
      <div className={styles.progress}>
        <div
          className={`${styles.progressStep} ${step === "cart" ? styles.active : ""} ${step === "shipping" || step === "payment" ? styles.completed : ""}`}
        >
          <div className={styles.progressIcon}>1</div>
          <span className={styles.progressLabel}>–ö–æ—à–∏–∫</span>
        </div>
        <div className={styles.progressLine}></div>
        <div
          className={`${styles.progressStep} ${step === "shipping" ? styles.active : ""} ${step === "payment" ? styles.completed : ""}`}
        >
          <div className={styles.progressIcon}>2</div>
          <span className={styles.progressLabel}>–î–æ—Å—Ç–∞–≤–∫–∞</span>
        </div>
        <div className={styles.progressLine}></div>
        <div
          className={`${styles.progressStep} ${step === "payment" ? styles.active : ""}`}
        >
          <div className={styles.progressIcon}>3</div>
          <span className={styles.progressLabel}>–û–ø–ª–∞—Ç–∞</span>
        </div>
      </div>

      <div className={styles.layout}>
        <div className={styles.formContainer}>
          <form onSubmit={handleSubmit}>
            {/* Step 1: Cart Review */}
            {step === "cart" && (
              <div className={styles.formSection}>
                <h2 className={styles.sectionTitle}>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>

                <div className={styles.cartItems}>
                  {Object.values(cart.items).map((item) => (
                    <div key={item.productId} className={styles.cartItem}>
                      <div className={styles.cartItemImage}>
                        {item.image ? (
                          <Image
                            src={item.image}
                            alt={item.title}
                            width={80}
                            height={80}
                            style={{ objectFit: "contain" }}
                          />
                        ) : (
                          <div className={styles.noImage}>–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</div>
                        )}
                      </div>
                      <div className={styles.cartItemInfo}>
                        <h3 className={styles.cartItemTitle}>{item.title}</h3>
                        <div className={styles.cartItemPrice}>
                          {item.price} ‚Ç¥
                        </div>
                      </div>
                      <div className={styles.cartItemQty}>
                        <div className={styles.qtyControls}>
                          <button
                            type="button"
                            className={styles.qtyBtn}
                            onClick={() =>
                              cart.setQty(
                                item.productId,
                                Math.max(0, item.qty - 1),
                              )
                            }
                          >
                            -
                          </button>
                          <span className={styles.qty}>{item.qty}</span>
                          <button
                            type="button"
                            className={styles.qtyBtn}
                            onClick={() =>
                              cart.setQty(item.productId, item.qty + 1)
                            }
                          >
                            +
                          </button>
                        </div>
                        <button
                          type="button"
                          className={styles.removeBtn}
                          onClick={() => cart.remove(item.productId)}
                        >
                          –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                      </div>
                    </div>
                  ))}
                </div>

                <div className={styles.cartActions}>
                  <Link href="/catalog" className={styles.continueShoppingLink}>
                    –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏
                  </Link>
                  <Button onClick={goToNextStep}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</Button>
                </div>
              </div>
            )}

            {/* Step 2: Shipping Information */}
            {step === "shipping" && (
              <div className={styles.formSection}>
                <h2 className={styles.sectionTitle}>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</h2>

                <div className={styles.formGroup}>
                  <label htmlFor="name" className={styles.label}>
                    –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ <span className={styles.required}>*</span>
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className={errors.name ? styles.inputError : styles.input}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ"
                  />
                  {errors.name && (
                    <div className={styles.errorText}>{errors.name}</div>
                  )}
                </div>

                <div className={styles.formRow}>
                  <div className={styles.formGroup}>
                    <label htmlFor="email" className={styles.label}>
                      Email <span className={styles.required}>*</span>
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      className={
                        errors.email ? styles.inputError : styles.input
                      }
                      placeholder="–í–≤–µ–¥—ñ—Ç—å email"
                    />
                    {errors.email && (
                      <div className={styles.errorText}>{errors.email}</div>
                    )}
                  </div>

                  <div className={styles.formGroup}>
                    <label htmlFor="phone" className={styles.label}>
                      –¢–µ–ª–µ—Ñ–æ–Ω <span className={styles.required}>*</span>
                    </label>
                    <input
                      type="tel"
                      id="phone"
                      name="phone"
                      value={formData.phone}
                      onChange={handleChange}
                      className={
                        errors.phone ? styles.inputError : styles.input
                      }
                      placeholder="+380XXXXXXXXX"
                    />
                    {errors.phone && (
                      <div className={styles.errorText}>{errors.phone}</div>
                    )}
                  </div>
                </div>

                <div className={styles.formGroup}>
                  <label htmlFor="city" className={styles.label}>
                    –ú—ñ—Å—Ç–æ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ <span className={styles.required}>*</span>
                  </label>
                  <div className={styles.autocompleteWrapper}>
                    <input
                      type="text"
                      id="city"
                      value={citySearch}
                      onChange={(e) => {
                        setCitySearch(e.target.value);
                        setShowCities(true);
                      }}
                      onFocus={() => setShowCities(true)}
                      className={errors.city ? styles.inputError : styles.input}
                      placeholder="–ü–æ—á–Ω—ñ—Ç—å –≤–≤–æ–¥–∏—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞..."
                    />
                    {showCities && cities.length > 0 && (
                      <div className={styles.autocompleteList}>
                        {cities.map((city) => (
                          <button
                            key={city.ref}
                            type="button"
                            className={styles.autocompleteItem}
                            onClick={() => {
                              setFormData((prev) => ({
                                ...prev,
                                city: city.name,
                                cityRef: city.ref,
                                warehouse: "",
                                warehouseRef: "",
                                address: "",
                              }));
                              setCitySearch(city.name);
                              setShowCities(false);
                            }}
                          >
                            <div className={styles.cityName}>{city.name}</div>
                            <div className={styles.cityArea}>{city.area}</div>
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                  {errors.city && (
                    <div className={styles.errorText}>{errors.city}</div>
                  )}
                </div>

                {formData.cityRef && (
                  <div className={styles.formGroup}>
                    <label htmlFor="warehouse" className={styles.label}>
                      –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏{" "}
                      <span className={styles.required}>*</span>
                    </label>
                    <div className={styles.autocompleteWrapper}>
                      <input
                        type="text"
                        id="warehouse"
                        value={formData.warehouse}
                        onChange={(e) => {
                          setFormData((prev) => ({
                            ...prev,
                            warehouse: e.target.value,
                          }));
                          setShowWarehouses(true);
                        }}
                        onFocus={() => setShowWarehouses(true)}
                        className={
                          errors.address ? styles.inputError : styles.input
                        }
                        placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è..."
                      />
                      {showWarehouses && warehouses.length > 0 && (
                        <div className={styles.autocompleteList}>
                          {warehouses.map((wh) => (
                            <button
                              key={wh.ref}
                              type="button"
                              className={styles.autocompleteItem}
                              onClick={() => {
                                setFormData((prev) => ({
                                  ...prev,
                                  warehouse: wh.description,
                                  warehouseRef: wh.ref,
                                  address: wh.description,
                                }));
                                setShowWarehouses(false);
                              }}
                            >
                              {wh.description}
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                    {errors.address && (
                      <div className={styles.errorText}>{errors.address}</div>
                    )}
                  </div>
                )}

                <div className={styles.formActions}>
                  <Button variant="ghost" onClick={goToPrevStep}>
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button onClick={goToNextStep}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</Button>
                </div>
              </div>
            )}

            {/* Step 3: Payment Information */}
            {step === "payment" && (
              <div className={styles.formSection}>
                <h2 className={styles.sectionTitle}>–û–ø–ª–∞—Ç–∞</h2>

                <div className={styles.paymentOptions}>
                  <label className={styles.paymentOption}>
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="cod"
                      checked={formData.paymentMethod === "cod"}
                      onChange={handleChange}
                    />
                    <div className={styles.paymentOptionContent}>
                      <div className={styles.paymentOptionTitle}>
                        –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ
                      </div>
                      <div className={styles.paymentOptionDesc}>
                        –û–ø–ª–∞—Ç—ñ—Ç—å –≥–æ—Ç—ñ–≤–∫–æ—é –∞–±–æ –∫–∞—Ä—Ç–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                      </div>
                    </div>
                  </label>

                  <label className={styles.paymentOption}>
                    <input
                      type="radio"
                      name="paymentMethod"
                      value="requisites"
                      checked={formData.paymentMethod === "requisites"}
                      onChange={handleChange}
                    />
                    <div className={styles.paymentOptionContent}>
                      <div className={styles.paymentOptionTitle}>
                        –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏
                      </div>
                      <div className={styles.paymentOptionDesc}>
                        –ü—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
                        –¥–ª—è –æ–ø–ª–∞—Ç–∏
                      </div>
                    </div>
                  </label>
                </div>

                {formData.paymentMethod === "requisites" && (
                  <div className={styles.requisitesInfo}>
                    <h3 className={styles.requisitesTitle}>
                      –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:
                    </h3>
                    <div className={styles.requisitesDetails}>
                      <p>
                        <strong>–û—Ç—Ä–∏–º—É–≤–∞—á:</strong> –§–û–ü –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á
                      </p>
                      <p>
                        <strong>–Ñ–î–†–ü–û–£:</strong> 1234567890
                      </p>
                      <p>
                        <strong>–ë–∞–Ω–∫:</strong> –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫
                      </p>
                      <p>
                        <strong>IBAN:</strong> UA123456789012345678901234567
                      </p>
                      <p>
                        <strong>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:</strong> –û–ø–ª–∞—Ç–∞ –∑–∞
                        –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ[–±—É–¥–µ –≤–∫–∞–∑–∞–Ω–æ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è]
                      </p>
                    </div>
                    <p className={styles.requisitesNote}>
                      ‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞
                      —Ä–∞—Ö—É–Ω–æ–∫ (–∑–∞–∑–≤–∏—á–∞–π 1-2 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ).
                    </p>
                  </div>
                )}

                <div className={styles.formGroup}>
                  <label htmlFor="notes" className={styles.label}>
                    –ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                  </label>
                  <textarea
                    id="notes"
                    name="notes"
                    value={formData.notes}
                    onChange={handleChange}
                    className={styles.textarea}
                    placeholder="–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                    rows={4}
                  />
                </div>

                <div className={styles.formActions}>
                  <Button variant="ghost" onClick={goToPrevStep}>
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? "–û–±—Ä–æ–±–∫–∞..." : "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}
                  </Button>
                </div>
              </div>
            )}
          </form>
        </div>

        <div className={styles.orderSummary}>
          <h2 className={styles.summaryTitle}>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>

          <div className={styles.summaryItems}>
            {Object.values(cart.items).map((item) => (
              <div key={item.productId} className={styles.summaryItem}>
                <div className={styles.summaryItemName}>
                  {item.title}{" "}
                  <span className={styles.summaryItemQty}>x{item.qty}</span>
                </div>
                <div className={styles.summaryItemPrice}>
                  {item.price * item.qty} ‚Ç¥
                </div>
              </div>
            ))}
          </div>

          {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É */}
          {step !== "cart" && formData.city && (
            <div className={styles.summaryDelivery}>
              <h3 className={styles.summarySubtitle}>–î–æ—Å—Ç–∞–≤–∫–∞</h3>
              <div className={styles.deliveryInfo}>
                <div className={styles.deliveryRow}>
                  <strong>–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫:</strong> –ù–æ–≤–∞ –ü–æ—à—Ç–∞
                </div>
                {formData.city && (
                  <div className={styles.deliveryRow}>
                    <strong>–ú—ñ—Å—Ç–æ:</strong> {formData.city}
                  </div>
                )}
                {formData.warehouse && (
                  <div className={styles.deliveryRow}>
                    <strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</strong> {formData.warehouse}
                  </div>
                )}
              </div>
            </div>
          )}

          <div className={styles.summaryTotals}>
            <div className={styles.summaryRow}>
              <div className={styles.summaryLabel}>–°—É–º–∞</div>
              <div className={styles.summaryValue}>{subtotal} ‚Ç¥</div>
            </div>

            <div className={styles.summaryRow}>
              <div className={styles.summaryLabel}>–î–æ—Å—Ç–∞–≤–∫–∞</div>
              <div className={styles.summaryValue}>
                {shippingFee === 0 ? "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ" : `${shippingFee} ‚Ç¥`}
              </div>
            </div>

            <div className={`${styles.summaryRow} ${styles.summaryTotal}`}>
              <div className={styles.summaryLabel}>–í—Å—å–æ–≥–æ</div>
              <div className={styles.summaryValue}>{total} ‚Ç¥</div>
            </div>
          </div>

          <div className={styles.shippingNote}>
            {subtotal < 1500 ? (
              <p>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 1500 ‚Ç¥</p>
            ) : (
              <p>–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –¥–æ—Å—Ç–∞–≤–∫—É!</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

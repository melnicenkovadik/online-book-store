import type { NextRequest } from "next/server";
import { uploadImageToCloudinary } from "@/lib/cloudinary";

export async function POST(request: NextRequest) {
  try {
    console.log("üî• Cloudinary Upload API called");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å credentials
    if (
      !process.env.CLOUDINARY_CLOUD_NAME ||
      !process.env.CLOUDINARY_API_KEY ||
      !process.env.CLOUDINARY_API_SECRET
    ) {
      console.error("‚ùå Cloudinary credentials not found");
      return Response.json(
        { error: "Cloudinary –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –î–æ–¥–∞–π credentials –≤ .env.local" },
        { status: 500 },
      );
    }

    const formData = await request.formData();
    const files = formData.getAll("images") as File[];

    console.log("üìÅ Files received:", files.length);
    files.forEach((file, i) => {
      console.log(`File ${i}:`, {
        name: file.name,
        type: file.type,
        size: file.size,
      });
    });

    if (!files || files.length === 0) {
      console.log("‚ùå No files received");
      return Response.json({ error: "–§–∞–π–ª–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ" }, { status: 400 });
    }

    const uploadedUrls: string[] = [];
    const uploadPromises: Promise<void>[] = [];

    for (const file of files) {
      console.log(`üñºÔ∏è Processing file: ${file.name}, type: ${file.type}`);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
      if (!file.type.startsWith("image/")) {
        console.log(`‚ùå Skipping non-image file: ${file.type}`);
        continue;
      }

      // –î–æ–¥–∞—î–º–æ –≤ –º–∞—Å–∏–≤ –ø—Ä–æ–º—ñ—Å—ñ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const uploadPromise = (async () => {
        try {
          console.log(`‚òÅÔ∏è Uploading to Cloudinary: ${file.name}`);

          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª –≤ Buffer
          const buffer = Buffer.from(await file.arrayBuffer());

          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ Cloudinary
          const result = await uploadImageToCloudinary(buffer, file.name);

          // –î–æ–¥–∞—î–º–æ URL –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          uploadedUrls.push(result.secure_url);
          console.log(`‚úÖ Cloudinary upload success: ${result.secure_url}`);
        } catch (error) {
          console.error(`‚ùå Failed to upload ${file.name}:`, error);
          throw error;
        }
      })();

      uploadPromises.push(uploadPromise);
    }

    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
    await Promise.all(uploadPromises);

    console.log(`üéâ All uploads completed. Total: ${uploadedUrls.length}`);

    return Response.json({
      urls: uploadedUrls,
      message: `–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${uploadedUrls.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ Cloudinary`,
    });
  } catch (error) {
    console.error("Cloudinary upload error:", error);
    return Response.json(
      { error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Cloudinary" },
      { status: 500 },
    );
  }
}

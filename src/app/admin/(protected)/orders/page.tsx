"use client";
import Link from "next/link";
import React from "react";
import type { AdminOrderListItem } from "@/services/admin";
import { useAdminOrdersList } from "@/services/admin";
import styles from "../products/products.module.scss";

export default function AdminOrdersPage() {
  const [q, setQ] = React.useState("");
  const [status, setStatus] = React.useState("");
  const [page, setPage] = React.useState(1);
  const perPage = 20;
  const { data, isLoading } = useAdminOrdersList({ q, status, page, perPage });

  const statusLabels: Record<string, string> = {
    new: "–ù–æ–≤–µ",
    processing: "–í –æ–±—Ä–æ–±—Ü—ñ",
    shipped: "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    cancelled: "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
      </div>

      <div className={styles.toolbar}>
        <input
          value={q}
          onChange={(e) => {
            setPage(1);
            setQ(e.target.value);
          }}
          placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º, –ü–Ü–ë, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º..."
          className={styles.searchInput}
        />

        <select
          value={status}
          onChange={(e) => {
            setPage(1);
            setStatus(e.target.value);
          }}
          className={styles.sortSelect}
        >
          <option value="">–£—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
          <option value="new">–ù–æ–≤—ñ</option>
          <option value="processing">–í –æ–±—Ä–æ–±—Ü—ñ</option>
          <option value="shipped">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</option>
          <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ñ</option>
          <option value="cancelled">–°–∫–∞—Å–æ–≤–∞–Ω—ñ</option>
        </select>
      </div>

      {isLoading && <div className={styles.info}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶</div>}

      {!isLoading && data && (
        <>
          <div className={styles.tableWrapper}>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th className={styles.th}>‚Ññ</th>
                  <th className={styles.th}>–ö–ª—ñ—î–Ω—Ç</th>
                  <th className={styles.th}>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th className={styles.th}>–°—É–º–∞</th>
                  <th className={styles.th}>–°—Ç–∞—Ç—É—Å</th>
                  <th className={styles.th}>–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                  <th className={styles.th}>–î—ñ—ó</th>
                </tr>
              </thead>
              <tbody>
                {data.items.map((o: AdminOrderListItem) => (
                  <tr key={o.id}>
                    <td className={styles.td}>#{o.number}</td>
                    <td className={styles.td}>{o.customer.fullName}</td>
                    <td className={styles.td}>{o.customer.phone}</td>
                    <td className={styles.td}>
                      {o.totals.grand.toFixed(0)} –≥—Ä–Ω
                    </td>
                    <td className={styles.td}>
                      <span className={styles.statusBadge}>
                        {statusLabels[o.status] || o.status}
                      </span>
                    </td>
                    <td className={styles.td}>
                      {new Date(o.createdAt).toLocaleDateString("uk-UA")}
                    </td>
                    <td className={styles.td}>
                      <div className={styles.actions}>
                        <Link
                          href={`/admin/orders/${o.id}`}
                          className={styles.iconButton}
                          title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"
                        >
                          üëÅÔ∏è
                        </Link>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {data.items.length === 0 && (
            <div className={styles.info}>–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>
          )}

          <div className={styles.pagination}>
            <button
              type="button"
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              disabled={page <= 1}
              className={styles.paginationButton}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <div className={styles.paginationInfo}>
              –°—Ç–æ—Ä—ñ–Ω–∫–∞ {data.page} –∑{" "}
              {Math.max(1, Math.ceil(data.total / data.perPage))}
            </div>
            <button
              type="button"
              onClick={() => setPage((p) => p + 1)}
              disabled={data.items.length < data.perPage}
              className={styles.paginationButton}
            >
              –î–∞–ª—ñ ‚Üí
            </button>
          </div>

          <div className={styles.info}>–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {data.total}</div>
        </>
      )}
    </div>
  );
}

import { v2 as cloudinary } from "cloudinary";
import type {
  CloudinaryUploadResult,
  ImageTransformationOptions,
} from "@/types/cloudinary";
import { getEnv } from "./env";

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Cloudinary
const { CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET } =
  getEnv();
cloudinary.config({
  cloud_name: CLOUDINARY_CLOUD_NAME,
  api_key: CLOUDINARY_API_KEY,
  api_secret: CLOUDINARY_API_SECRET,
});

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Cloudinary
 * @param buffer - Buffer –∑ —Ñ–∞–π–ª–æ–º
 * @param filename - –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
 * @returns Promise –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
export async function uploadImageToCloudinary(
  buffer: Buffer,
  filename: string,
): Promise<CloudinaryUploadResult> {
  return new Promise((resolve, reject) => {
    cloudinary.uploader
      .upload_stream(
        {
          folder: "books-store/products", // –ü–∞–ø–∫–∞ –≤ Cloudinary
          public_id: `${Date.now()}-${filename.split(".")[0]}`, // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
          resource_type: "image",
          format: "webp", // –ê–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WebP
          quality: "auto:good", // –ê–≤—Ç–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ
          fetch_format: "auto", // –ê–≤—Ç–æ–≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É
          transformation: [
            { width: 1200, height: 1200, crop: "limit" }, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
            { quality: "auto:good" },
            { format: "auto" },
          ],
        },
        (error, result) => {
          if (error) {
            console.error("Cloudinary upload error:", error);
            reject(error);
          } else if (result) {
            console.log("‚úÖ Cloudinary upload success:", result.secure_url);
            resolve(result);
          } else {
            reject(new Error("Unknown error occurred"));
          }
        },
      )
      .end(buffer);
  });
}

/**
 * –í–∏–¥–∞–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary
 * @param publicId - Public ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
export async function deleteImageFromCloudinary(
  publicId: string,
): Promise<void> {
  try {
    const result = await cloudinary.uploader.destroy(publicId);
    console.log("üóëÔ∏è Image deleted from Cloudinary:", result);
  } catch (error) {
    console.error("Error deleting image from Cloudinary:", error);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π URL –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param publicId - Public ID –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param width - –®–∏—Ä–∏–Ω–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @param height - –í–∏—Å–æ—Ç–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
export function getOptimizedImageUrl(
  publicId: string,
  width?: number,
  height?: number,
): string {
  const transformation: ImageTransformationOptions[] = [];

  if (width !== undefined || height !== undefined) {
    const transformationOptions: ImageTransformationOptions = {
      crop: "fit",
      quality: "auto:good",
      format: "auto",
    };

    if (width !== undefined) {
      transformationOptions.width = width;
    }

    if (height !== undefined) {
      transformationOptions.height = height;
    }

    transformation.push(transformationOptions);
  }

  return cloudinary.url(publicId, {
    transformation,
    secure: true,
  });
}

export default cloudinary;
